{"version":3,"sources":["libs/ws.lib.js","routes/index.js","routes/routes.js","store/auth/events.js","store/auth/store.js","settings/settings.js","services/services.js","store/auth/auth.store.libs.js","libs/auth.lib.js","utils/utils.js","store/auth/effects.js","containers/PrivateRoute/PrivateRouteContainer.jsx","components/MainTitle/MainTitle.jsx","components/InfoCard/InfoCard.jsx","components/CustomInput/CustomInput.jsx","components/Spiner/Spinner.jsx","components/CustomButton/CustomButton.jsx","components/LoginErrorMessage/LoginErrorMessage.jsx","dictionary/dictionary.js","containers/Notification/NotificationContainer.jsx","pages/SignIn/SignIn.jsx","pages/SignIn/index.js","components/CustomLink/CustomLink.jsx","icons/Close/Close.icon.jsx","components/NotificationWindow/NotificationWindow.jsx","store/notification/events.js","store/notification/store.js","store/notification/notification.store.libs.js","components/ConnectionStatus/ConnectionStatus.jsx","store/main/events.js","store/main/effects.js","store/main/store.js","containers/ConnectionStatus/ConnectionStatusContainer.jsx","components/ServerTime/ServerTime.jsx","containers/ServerTime/ServerTimeContainer.jsx","pages/Main/index.js","pages/Main/Main.jsx","App.jsx","index.jsx"],"names":["disconnectTimer","closeTimer","routes","signIn","main","setAuth","createEvent","setAuthToken","setAuthError","resetAuthError","setAuthLoading","$auth","createStore","on","_state","value","$authError","token","reset","$authLoading","settings","API_URL","username","password","axios","post","wSocket","socket","startSockets","url","onMessage","onClose","WebSocket","onmessage","event","data","onclose","a","code","wasClean","reason","onerror","close","closeSocket","clearTimeout","setAuthFromCookie","Cookies","e","removeToken","isTokenValid","status","multipleFetchUrl","callback","body","count","n","error","response","addZero","slice","getDateAndTime","time","date","Date","getDate","getMonth","getFullYear","getHours","getMinutes","getSeconds","signInUserFx","createEffect","handler","params","login","history","headers","expires","push","description","PrivateRouteContainer","Component","component","rest","auth","useStore","render","props","to","MainTitle","title","className","InfoCard","defaultProps","CustomInput","React","memo","onChange","type","disabled","maxLength","errorMessage","propTypes","PropTypes","string","isRequired","func","oneOf","number","bool","Spinner","CustomButton","loading","onClick","LoginErrorMessage","message","timerId","dictionary","required","connected","disconnected","logout","gitTitle","getDictionaryValue","undefined","setValue","setCallbackValue","currentTarget","initialErrors","SignIn","authError","authLoading","useHistory","useState","setLogin","setPassword","errors","setErrors","useEffect","mainComponent","onSubmit","preventDefault","innerLogin","trim","validatedFields","validateFields","Object","keys","some","item","CustomLink","link","href","target","rel","CloseIcon","width","height","viewBox","fill","xmlns","d","stroke","strokeWidth","strokeLinecap","NotificationWindow","addNotificationMessage","removeNotificationMessage","shiftNotificationMessage","$notifications","state","id","Math","random","toString","substr","notifications","shift","filter","showErrors","err","name","NotificationContainer","clearInterval","length","setInterval","listItems","map","key","ConnectionStatus","connectedTitle","disconnectedTitle","setStatusConnected","setStatusDisconnected","setServerTime","resetServerTime","subscribeFx","setDisconnectData","timeoutWebsocket","onSocketMessage","disconnectCallback","closeCallback","JSON","parse","server_time","setTimeout","get","result","$connectedStatus","$serverTime","ConnectionStatusContainer","connectedStatus","ServerTime","isConnection","ServerTimeContainer","serverTime","Main","App","exact","path","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e4794ebd.chunk.js","sourcesContent":["const DISCONNECT_TIME_OUT = 3000;\r\nlet disconnectTimer;\r\nconst CLOSE_TIME_OUT = 10000;\r\nlet closeTimer;\r\n\r\nexport const wSocket = {\r\n  socket: null,\r\n};\r\n\r\nexport const startSockets = (url, onMessage, onClose) => {\r\n  wSocket.socket = new WebSocket(url);\r\n\r\n  wSocket.socket.onmessage = (event) => {\r\n    if (onMessage) onMessage(event.data);\r\n  };\r\n  wSocket.socket.onclose = async (event) => {\r\n    //\r\n    if (onClose) onClose(event.code, event.wasClean, event.reason);\r\n  };\r\n  wSocket.socket.onerror = () => {\r\n    wSocket.socket.close();\r\n  };\r\n};\r\n\r\nexport const closeSocket = () => {\r\n  if (!wSocket.socket) return;\r\n  clearTimeout(closeTimer);\r\n  wSocket.socket.close();\r\n};\r\n\r\nexport const setDisconnectEvents = (disconnectCallback, closeCallback) => {\r\n  clearTimeout(disconnectTimer);\r\n  disconnectTimer = setTimeout(disconnectCallback, DISCONNECT_TIME_OUT);\r\n  clearTimeout(closeTimer);\r\n  closeTimer = setTimeout(() => {\r\n    closeSocket();\r\n    closeCallback();\r\n  }, CLOSE_TIME_OUT);\r\n};\r\n\r\nexport const getSocket = () => wSocket.socket;\r\n","import routes from './routes';\r\n\r\nexport default routes;\r\n","export default {\r\n  signIn: '/sign-in',\r\n  main: '/',\r\n};\r\n","import { createEvent } from 'effector';\r\n\r\n/**\r\n * @param {boolean} auth\r\n */\r\nexport const setAuth = createEvent('set authorization');\r\n/**\r\n * @param {string} token\r\n */\r\nexport const setAuthToken = createEvent('set token');\r\n/**\r\n * @param {string} auth error\r\n */\r\nexport const setAuthError = createEvent('set authorization error');\r\nexport const resetAuthError = createEvent('reset authorization error');\r\n/**\r\n * @param {boolean} loading\r\n */\r\nexport const setAuthLoading = createEvent('set authorization loading');\r\n","import { createStore } from 'effector';\r\n// events\r\nimport { setAuth, setAuthToken, setAuthError, resetAuthError, setAuthLoading } from './events';\r\n\r\nexport const $auth = createStore(false).on(setAuth, (_state, value) => value);\r\n\r\nexport const $authToken = createStore('').on(setAuthToken, (_state, token) => token);\r\nexport const $authError = createStore('')\r\n  .on(setAuthError, (_state, value) => value)\r\n  .reset(resetAuthError);\r\n\r\nexport const $authLoading = createStore(false).on(setAuthLoading, (_state, token) => token);\r\n","export const settings = {\r\n  authCookieName: '_appToken',\r\n  gitLink: 'https://github.com/fmva/ws-console',\r\n};\r\n","import axios from 'axios';\r\nimport * as Cookies from 'js-cookie';\r\nimport { settings } from '../settings';\r\n\r\nconst API_URL = 'https://work.vint-x.net/api';\r\nconst TOKEN = 'x-test-app-jwt-token';\r\n\r\nexport const signIn = ({ username, password }) => axios.post(`${API_URL}/login`, { username, password });\r\n\r\nexport const subscribe = () =>\r\n  axios.get(`${API_URL}/subscribe`, { headers: { [TOKEN]: Cookies.get(settings.authCookieName) } });\r\n","// store\r\nimport { setAuth } from './events';\r\n// libs\r\nimport { getAuthData, removeAuthData } from '../../libs';\r\n\r\n/**\r\n * set authentication from cookie\r\n */\r\nexport const setAuthFromCookie = () => {\r\n  try {\r\n    const authData = getAuthData();\r\n    if (authData) {\r\n      setAuth(true);\r\n    }\r\n  } catch (e) {\r\n    setAuth(false);\r\n  }\r\n};\r\n\r\nexport const removeToken = () => {\r\n  removeAuthData();\r\n  setAuth(false);\r\n};\r\n","import * as Cookies from 'js-cookie';\r\n// settings\r\nimport { settings } from '../settings';\r\n\r\nconst LIVE_OF_COOKIE_ONE_DAY = 1;\r\n\r\n/**\r\n * @param {string} token\r\n */\r\nexport const setAuthData = (token) => {\r\n  Cookies.set(settings.authCookieName, token, { expires: LIVE_OF_COOKIE_ONE_DAY });\r\n};\r\n\r\n/**\r\n * @return {string}\r\n */\r\nexport const getAuthData = () => Cookies.get(settings.authCookieName);\r\n\r\nexport const removeAuthData = () => {\r\n  Cookies.remove(settings.authCookieName);\r\n};\r\n","const BAD_REQUEST_STATUS = 400;\r\nconst UNAUTHORIZED_STATUS = 401;\r\nconst M_SEC = 1000;\r\n\r\nexport const isTokenValid = (status) => !(status === BAD_REQUEST_STATUS || status === UNAUTHORIZED_STATUS);\r\n\r\n/**\r\n * @param {function} callback\r\n * @param {object} body\r\n * @param {number} count\r\n */\r\nexport const multipleFetchUrl = async (callback, body, count) => {\r\n  let error;\r\n  for (let n = 0; n < count; n++) {\r\n    try {\r\n      return await callback(body);\r\n    } catch (err) {\r\n      error = err;\r\n      if (!isTokenValid(err.response.status)) break;\r\n    }\r\n  }\r\n  throw error;\r\n};\r\n\r\nexport const uniqueId = () => `_${Math.random().toString(36).substr(2, 9)}`;\r\n\r\nconst addZero = (value) => `0${value}`.slice(-2);\r\n\r\nexport const getDateAndTime = (time) => {\r\n  if (time === 0) return '';\r\n  const date = new Date(time * M_SEC);\r\n\r\n  return `${addZero(date.getDate())}-${addZero(date.getMonth() + 1)}-${date.getFullYear()} ${addZero(\r\n    date.getHours(),\r\n  )}:${addZero(date.getMinutes())}:${addZero(date.getSeconds())}`;\r\n};\r\n","import { createEffect } from 'effector';\r\n// events\r\nimport { setAuth, setAuthError, setAuthLoading } from './events';\r\n// routes\r\nimport routes from '../../routes';\r\n// services\r\nimport { signIn } from '../../services';\r\n// libs\r\nimport { setAuthData } from '../../libs';\r\nimport { removeToken } from './auth.store.libs';\r\n// utils\r\nimport { multipleFetchUrl } from '../../utils';\r\n\r\nconst LOGIN_COUNT = 3;\r\n\r\n/**\r\n * log in action\r\n * @param {object} params - user info\r\n * @param {string} params.login - login.\r\n * @param {string} params.password - password.\r\n * @param {object} params.history - browser history\r\n */\r\nexport const signInUserFx = createEffect({\r\n  async handler(params) {\r\n    const { login, password, history } = params;\r\n    setAuthLoading(true);\r\n    try {\r\n      const data = await multipleFetchUrl(signIn, { password, username: login }, LOGIN_COUNT);\r\n      setAuthData(data.headers['x-test-app-jwt-token']);\r\n      setAuth(true);\r\n      history.push(routes.main);\r\n    } catch (err) {\r\n      removeToken();\r\n      if (err && err.response && err.response.data && err.response.data.description) {\r\n        setAuthError(err.response.data.description);\r\n      }\r\n    }\r\n    setAuthLoading(false);\r\n  },\r\n});\r\n","import React from 'react';\r\nimport { useStore } from 'effector-react';\r\nimport PropTypes from 'prop-types';\r\nimport { Route, Redirect } from 'react-router-dom';\r\n// routes\r\nimport routes from '../../routes';\r\n// store\r\nimport { $auth } from '../../store/auth';\r\n\r\nexport const PrivateRouteContainer = ({ component: Component, ...rest }) => {\r\n  const auth = useStore($auth);\r\n  return (\r\n    <Route {...rest} render={(props) => (auth === true ? <Component {...props} /> : <Redirect to={routes.signIn} />)} />\r\n  );\r\n};\r\n\r\nPrivateRouteContainer.propTypes = {\r\n  component: PropTypes.func.isRequired,\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n// styles\r\nimport './MainTitle.scss';\r\n\r\nexport const MainTitle = ({ title }) => <h1 className='main__title'>{title}</h1>;\r\nMainTitle.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n// components\r\nimport { MainTitle } from '../MainTitle';\r\n// styles\r\nimport './InfoCard.scss';\r\n\r\nexport const InfoCard = ({ component, title }) => (\r\n  <section className='info-card'>\r\n    {title !== '' && (\r\n      <div className='info-card__title'>\r\n        <MainTitle title={title} />\r\n      </div>\r\n    )}\r\n    <div className='info-card__body'>{component}</div>\r\n  </section>\r\n);\r\n\r\nInfoCard.defaultProps = {\r\n  title: '',\r\n};\r\n\r\nInfoCard.propTypes = {\r\n  component: PropTypes.node.isRequired,\r\n  title: PropTypes.string,\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n// styles\r\nimport './CustomInput.scss';\r\n\r\nexport const CustomInput = React.memo(({ title, value, onChange, type, disabled, maxLength, errorMessage }) => (\r\n  <div className='custom-input'>\r\n    <div className={`custom-input__title ${errorMessage !== '' ? 'custom-input__title-error' : ''}`}>{title}</div>\r\n    <input\r\n      className={`custom-input__input ${errorMessage !== '' ? 'custom-input__input-error' : ''}`}\r\n      type={type}\r\n      value={value}\r\n      onChange={onChange}\r\n      maxLength={maxLength}\r\n      disabled={disabled}\r\n    />\r\n    {errorMessage !== '' && <div className='custom-input__error'>{errorMessage}</div>}\r\n  </div>\r\n));\r\n\r\nCustomInput.defaultProps = {\r\n  title: '',\r\n  type: 'text',\r\n  maxLength: null,\r\n  errorMessage: '',\r\n  disabled: false,\r\n};\r\n\r\nCustomInput.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n  type: PropTypes.oneOf(['text', 'password', 'number']),\r\n  maxLength: PropTypes.number,\r\n  title: PropTypes.string,\r\n  errorMessage: PropTypes.string,\r\n  disabled: PropTypes.bool,\r\n};\r\n","import React from 'react';\r\n// styles\r\nimport './Spinner.scss';\r\n\r\nexport const Spinner = () => (\r\n  <div className='lds-spinner'>\r\n    <div />\r\n    <div />\r\n    <div />\r\n    <div />\r\n    <div />\r\n    <div />\r\n    <div />\r\n    <div />\r\n    <div />\r\n    <div />\r\n    <div />\r\n    <div />\r\n  </div>\r\n);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n// components\r\nimport { Spinner } from '../Spiner';\r\n// styles\r\nimport './CustomButton.scss';\r\n\r\nexport const CustomButton = ({ title, type, loading, onClick }) => (\r\n  <button className='custom-button' type={type} onClick={onClick}>\r\n    {loading ? <Spinner /> : title}\r\n  </button>\r\n);\r\n\r\nCustomButton.defaultProps = {\r\n  type: 'submit',\r\n  onClick: null,\r\n  loading: false,\r\n};\r\n\r\nCustomButton.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  onClick: PropTypes.func,\r\n  loading: PropTypes.bool,\r\n  type: PropTypes.oneOf(['submit', 'reset', 'button']),\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n// styles\r\nimport './LoginErrorMessage.scss';\r\n\r\nexport const LoginErrorMessage = ({ message }) => (\r\n  <>{message !== '' ? <div className='login-error-message'>{message}</div> : null}</>\r\n);\r\nLoginErrorMessage.defaultProps = {\r\n  message: '',\r\n};\r\n\r\nLoginErrorMessage.propTypes = {\r\n  message: PropTypes.string,\r\n};\r\n","const dictionary = {\r\n  login: 'Username',\r\n  password: 'Password',\r\n  signIn: 'Login',\r\n  title: 'WS Time',\r\n  required: 'Required',\r\n  connected: 'Connected',\r\n  disconnected: 'Disconnected',\r\n  logout: 'Logout',\r\n  gitTitle: '@fmva',\r\n};\r\n\r\nexport const getDictionaryValue = (value) => (dictionary[value] !== undefined ? dictionary[value] : `$${value}$`);\r\n","import React, { useEffect } from 'react';\r\nimport { useStore } from 'effector-react';\r\n// components\r\nimport { NotificationWindow } from '../../components/NotificationWindow';\r\n// store\r\nimport { $notifications, removeNotificationMessage, shiftNotificationMessage } from '../../store/notification';\r\n// styles\r\nimport './NotificationContainer.scss';\r\n\r\nconst NOTIFICATION_TIME_OUT = 10000;\r\nlet timerId;\r\n\r\nexport const NotificationContainer = () => {\r\n  const notifications = useStore($notifications);\r\n  useEffect(\r\n    () => () => {\r\n      clearInterval(timerId);\r\n    },\r\n    [],\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (notifications.length === 0) {\r\n      clearInterval(timerId);\r\n      return;\r\n    }\r\n\r\n    clearInterval(timerId);\r\n    timerId = setInterval(() => {\r\n      shiftNotificationMessage();\r\n    }, NOTIFICATION_TIME_OUT);\r\n  }, [notifications, notifications.length]);\r\n\r\n  const onClickCloseItem = (id) => () => {\r\n    removeNotificationMessage(id);\r\n  };\r\n\r\n  const listItems = notifications.map((item) => (\r\n    <li key={item.id} className='notification-container__item'>\r\n      <NotificationWindow title={item.title} onClick={onClickCloseItem(item.id)} message={item.message} />\r\n    </li>\r\n  ));\r\n  return <>{notifications.length > 0 ? <ul className='notification-container'>{listItems}</ul> : null}</>;\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useStore } from 'effector-react';\r\n// components\r\nimport { InfoCard } from '../../components/InfoCard';\r\nimport { CustomInput } from '../../components/CustomInput';\r\nimport { CustomButton } from '../../components/CustomButton';\r\nimport { LoginErrorMessage } from '../../components/LoginErrorMessage';\r\n// routes\r\nimport routes from '../../routes';\r\n// dictionary\r\nimport { getDictionaryValue } from '../../dictionary';\r\n// store\r\nimport { $authError, $auth, $authLoading, signInUserFx, resetAuthError } from '../../store/auth';\r\n// styles\r\nimport './SignIn.scss';\r\n\r\nconst setValue = (e, setCallbackValue) => {\r\n  const { value } = e.currentTarget;\r\n  setCallbackValue(value);\r\n};\r\n\r\nconst initialErrors = {\r\n  login: '',\r\n  password: '',\r\n};\r\n\r\n/**\r\n * validation auth fields\r\n * @param {string} login - login.\r\n * @param {string} password - subLogin.\r\n * @return {object} errors\r\n * @return {string} errors.login\r\n * @return {string} errors.password\r\n */\r\nconst validateFields = (login = '', password = '') => {\r\n  const errors = { ...initialErrors };\r\n  errors.login = login === '' ? getDictionaryValue('required') : '';\r\n  errors.password = password === '' ? getDictionaryValue('required') : '';\r\n  return errors;\r\n};\r\n\r\nexport const SignIn = () => {\r\n  const auth = useStore($auth);\r\n  const authError = useStore($authError);\r\n  const authLoading = useStore($authLoading);\r\n  const history = useHistory();\r\n\r\n  const [login, setLogin] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [errors, setErrors] = useState({ ...initialErrors });\r\n\r\n  useEffect(() => {\r\n    if (!auth) return;\r\n    history.push(routes.main);\r\n  }, [auth, history]);\r\n\r\n  const onLoginChange = (e) => {\r\n    setValue(e, setLogin);\r\n  };\r\n\r\n  const onPasswordChange = (e) => {\r\n    setValue(e, setPassword);\r\n  };\r\n\r\n  const onLogIn = (e) => {\r\n    e.preventDefault();\r\n    resetAuthError();\r\n    const innerLogin = login.trim();\r\n    const validatedFields = validateFields(innerLogin, password);\r\n    setErrors(validatedFields);\r\n    if (Object.keys(validatedFields).some((item) => validatedFields[item] !== '')) return;\r\n    signInUserFx({ password, history, login: innerLogin });\r\n  };\r\n\r\n  const mainComponent = (\r\n    <div>\r\n      <form className='sign-in__form' onSubmit={onLogIn}>\r\n        <LoginErrorMessage message={authError} />\r\n        <div className='sign-in__row'>\r\n          <CustomInput\r\n            title={getDictionaryValue('login')}\r\n            value={login}\r\n            onChange={onLoginChange}\r\n            errorMessage={errors.login}\r\n            disabled={authLoading}\r\n          />\r\n        </div>\r\n        <div className='sign-in__row'>\r\n          <CustomInput\r\n            title={getDictionaryValue('password')}\r\n            value={password}\r\n            type='password'\r\n            onChange={onPasswordChange}\r\n            errorMessage={errors.password}\r\n            disabled={authLoading}\r\n          />\r\n        </div>\r\n        <div className='sign-in__row'>\r\n          <CustomButton title={getDictionaryValue('signIn')} loading={authLoading} />\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <main className='sign-in'>\r\n      <div className='sign-in__card'>\r\n        <InfoCard title={getDictionaryValue('title')} component={mainComponent} />\r\n      </div>\r\n    </main>\r\n  );\r\n};\r\n","import { SignIn } from './SignIn';\r\n\r\nexport default SignIn;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n// styles\r\nimport './CustomLink.scss';\r\n\r\nexport const CustomLink = ({ title, link }) => (\r\n  <a className='custom-link' href={link} target='_blank' rel='noopener noreferrer'>\r\n    {title}\r\n  </a>\r\n);\r\n\r\nCustomLink.propTypes = {\r\n  link: PropTypes.string.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n};\r\n","import React from 'react';\r\n\r\nexport const CloseIcon = () => (\r\n  <svg width='20' height='20' viewBox='0 0 20 20' fill='none' xmlns='http://www.w3.org/2000/svg'>\r\n    <path d='M1 1L19 19' stroke='#0D0D0D' strokeWidth='2' strokeLinecap='round' />\r\n    <path d='M19 1L1 19' stroke='#0D0D0D' strokeWidth='2' strokeLinecap='round' />\r\n  </svg>\r\n);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n// icons\r\nimport { CloseIcon } from '../../icons/Close';\r\n// styles\r\nimport './NotificationWindow.scss';\r\n\r\nexport const NotificationWindow = ({ title, message, onClick }) => (\r\n  <section className='notification-window'>\r\n    <div className='notification-window__header'>\r\n      <div className='notification-window__title'>{title}</div>\r\n      <div className='notification-window__close'>\r\n        <button type='button' onClick={onClick}>\r\n          <CloseIcon />\r\n        </button>\r\n      </div>\r\n    </div>\r\n    <div className='notification-window__message'>{message}</div>\r\n  </section>\r\n);\r\n\r\nNotificationWindow.propTypes = {\r\n  onClick: PropTypes.func.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n  message: PropTypes.string.isRequired,\r\n};\r\n","import { createEvent } from 'effector';\r\n\r\n/**\r\n * add notification to the queue\r\n * @param {string} title - title of the notification.\r\n * @param {string} message - message of the notification.\r\n */\r\nexport const addNotificationMessage = createEvent('add notification item to the pipe');\r\n/**\r\n * @param {string} id\r\n */\r\nexport const removeNotificationMessage = createEvent('remove notification item from the pipe');\r\nexport const shiftNotificationMessage = createEvent('shift message from notification pipe');\r\n","import { createStore } from 'effector';\r\n// events\r\nimport { addNotificationMessage, shiftNotificationMessage, removeNotificationMessage } from './events';\r\n// utils\r\nimport { uniqueId } from '../../utils';\r\n\r\nexport const $notifications = createStore([])\r\n  .on(addNotificationMessage, (state, item) => [...state, { ...item, id: uniqueId() }])\r\n  .on(shiftNotificationMessage, (state) => {\r\n    const notifications = [...state];\r\n    notifications.shift();\r\n    return notifications;\r\n  })\r\n  .on(removeNotificationMessage, (state, id) => state.filter((item) => item.id !== id));\r\n","// events\r\nimport { addNotificationMessage } from './events';\r\nimport { removeToken } from '../auth';\r\n// utils\r\nimport { isTokenValid } from '../../utils';\r\n\r\nexport const showErrors = (title, err) => {\r\n  if (err && err.response && err.response.status && !isTokenValid(err.response.status)) {\r\n    removeToken();\r\n    return;\r\n  }\r\n  let message = '';\r\n  if (err !== undefined && err.response !== undefined && err.response.data !== undefined) {\r\n    message = `${err.response.status ? err.response.status : ''} ${err.response.data.description}`;\r\n  } else if (err.message !== undefined && err.name !== undefined) {\r\n    message = `${err.name} ${err.message}`;\r\n  }\r\n\r\n  addNotificationMessage({ title, message });\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n// styles\r\nimport './ConnectionStatus.scss';\r\n\r\nexport const ConnectionStatus = ({ status, connectedTitle, disconnectedTitle }) => (\r\n  <div className={`connection-status ${status ? 'connection-status_connected' : 'connection-status_disconnected'}`}>\r\n    {status ? connectedTitle : disconnectedTitle}\r\n  </div>\r\n);\r\n\r\nConnectionStatus.propTypes = {\r\n  status: PropTypes.bool.isRequired,\r\n  connectedTitle: PropTypes.string.isRequired,\r\n  disconnectedTitle: PropTypes.string.isRequired,\r\n};\r\n","import { createEvent } from 'effector';\r\n\r\nexport const setStatusConnected = createEvent('set connected status');\r\nexport const setStatusDisconnected = createEvent('set disconnected status');\r\n/**\r\n * @param {number} time\r\n */\r\nexport const setServerTime = createEvent('set server time');\r\nexport const resetServerTime = createEvent('reset server time');\r\n","import { createEffect } from 'effector';\r\n// events\r\nimport { showErrors } from '../notification';\r\nimport { setStatusDisconnected, setStatusConnected, setServerTime } from './events';\r\n// services\r\nimport { subscribe } from '../../services';\r\n// utils\r\nimport { startSockets, closeSocket, setDisconnectEvents } from '../../libs';\r\n\r\nexport const subscribeFx = createEffect({\r\n  async handler() {\r\n    const setDisconnectData = () => {\r\n      setStatusDisconnected();\r\n    };\r\n    const timeoutWebsocket = () => {\r\n      subscribeFx();\r\n    };\r\n    const onSocketMessage = (data) => {\r\n      setServerTime(JSON.parse(data).server_time);\r\n      setStatusConnected();\r\n      setDisconnectEvents(setDisconnectData, timeoutWebsocket);\r\n    };\r\n    try {\r\n      const result = await subscribe();\r\n      startSockets(result.data.url, onSocketMessage);\r\n    } catch (err) {\r\n      closeSocket.close();\r\n      showErrors('subscribeFx', err);\r\n    }\r\n  },\r\n});\r\n","import { createStore } from 'effector';\r\n// events\r\nimport { setStatusConnected, setStatusDisconnected, setServerTime, resetServerTime } from './events';\r\n\r\nexport const $connectedStatus = createStore(false)\r\n  .on(setStatusConnected, () => true)\r\n  .reset(setStatusDisconnected);\r\n\r\nexport const $serverTime = createStore(0)\r\n  .on(setServerTime, (_state, time) => time)\r\n  .reset(resetServerTime);\r\n","import React from 'react';\r\nimport { useStore } from 'effector-react';\r\n// components\r\nimport { ConnectionStatus } from '../../components/ConnectionStatus';\r\n// dictionary\r\nimport { getDictionaryValue } from '../../dictionary';\r\n// store\r\nimport { $connectedStatus } from '../../store/main';\r\n\r\nexport const ConnectionStatusContainer = () => {\r\n  const connectedStatus = useStore($connectedStatus);\r\n  return (\r\n    <ConnectionStatus\r\n      status={connectedStatus}\r\n      connectedTitle={getDictionaryValue('connected')}\r\n      disconnectedTitle={getDictionaryValue('disconnected')}\r\n    />\r\n  );\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n// styles\r\nimport './ServerTime.scss';\r\n\r\nexport const ServerTime = ({ time, isConnection }) => (\r\n  <>\r\n    {time !== '' ? (\r\n      <div className={`server-time ${!isConnection ? 'server-time_disconnected' : ''}`}>{time}</div>\r\n    ) : null}\r\n  </>\r\n);\r\n\r\nServerTime.propTypes = {\r\n  time: PropTypes.string.isRequired,\r\n  isConnection: PropTypes.bool.isRequired,\r\n};\r\n","import React from 'react';\r\nimport { useStore } from 'effector-react';\r\n// components\r\nimport { ServerTime } from '../../components/ServerTime';\r\n// utils\r\nimport { getDateAndTime } from '../../utils';\r\n// store\r\nimport { $connectedStatus, $serverTime } from '../../store/main';\r\n\r\nexport const ServerTimeContainer = () => {\r\n  const connectedStatus = useStore($connectedStatus);\r\n  const serverTime = useStore($serverTime);\r\n\r\n  return <ServerTime time={getDateAndTime(serverTime)} isConnection={connectedStatus} />;\r\n};\r\n","import { Main } from './Main';\r\n\r\nexport default Main;\r\n","import React, { useEffect } from 'react';\r\n\r\n// components\r\nimport { InfoCard } from '../../components/InfoCard';\r\nimport { CustomButton } from '../../components/CustomButton';\r\nimport { CustomLink } from '../../components/CustomLink';\r\n// containers\r\nimport { NotificationContainer } from '../../containers/Notification';\r\nimport { ConnectionStatusContainer } from '../../containers/ConnectionStatus';\r\nimport { ServerTimeContainer } from '../../containers/ServerTime';\r\n// store\r\nimport { subscribeFx } from '../../store/main';\r\nimport { removeToken } from '../../store/auth';\r\n// settings\r\nimport { settings } from '../../settings';\r\n// libs\r\nimport { closeSocket } from '../../libs';\r\n// dictionary\r\nimport { getDictionaryValue } from '../../dictionary';\r\n// styles\r\nimport './Main.scss';\r\n\r\nexport const Main = () => {\r\n  useEffect(() => {\r\n    subscribeFx();\r\n  }, []);\r\n\r\n  const onClickLogout = () => {\r\n    closeSocket();\r\n    removeToken();\r\n  };\r\n\r\n  const mainComponent = (\r\n    <div>\r\n      <div className='main__row'>\r\n        <ConnectionStatusContainer />\r\n      </div>\r\n      <div className='main__row'>\r\n        <ServerTimeContainer />\r\n      </div>\r\n      <div className='main__row'>\r\n        <CustomButton type='button' title={getDictionaryValue('logout')} onClick={onClickLogout} />\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <main className='main'>\r\n      <div className='main__card'>\r\n        <InfoCard title={getDictionaryValue('title')} component={mainComponent} />\r\n        <div className='main__git-row'>\r\n          <CustomLink title={getDictionaryValue('gitTitle')} link={settings.gitLink} />\r\n        </div>\r\n      </div>\r\n      <NotificationContainer />\r\n    </main>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\r\n// containers\r\nimport { PrivateRouteContainer } from './containers/PrivateRoute';\r\n// routes\r\nimport routes from './routes';\r\n// sore\r\nimport { setAuthFromCookie } from './store/auth';\r\n// pages\r\nimport SignIn from './pages/SignIn';\r\nimport Main from './pages/Main';\r\n// styles\r\nimport './styles/common.scss';\r\n\r\nconst App = () => {\r\n  setAuthFromCookie();\r\n  return (\r\n    <BrowserRouter>\r\n      <Switch>\r\n        <Route exact path={routes.signIn} component={SignIn} />\r\n        <PrivateRouteContainer path={routes.main} component={Main} />\r\n      </Switch>\r\n    </BrowserRouter>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}